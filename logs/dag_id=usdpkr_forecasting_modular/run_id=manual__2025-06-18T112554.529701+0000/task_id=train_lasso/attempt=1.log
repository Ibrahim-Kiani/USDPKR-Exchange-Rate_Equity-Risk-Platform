[2025-06-18T11:26:17.263+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-06-18T11:26:17.296+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: usdpkr_forecasting_modular.train_lasso manual__2025-06-18T11:25:54.529701+00:00 [queued]>
[2025-06-18T11:26:17.305+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: usdpkr_forecasting_modular.train_lasso manual__2025-06-18T11:25:54.529701+00:00 [queued]>
[2025-06-18T11:26:17.306+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-06-18T11:26:17.318+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): train_lasso> on 2025-06-18 11:25:54.529701+00:00
[2025-06-18T11:26:17.325+0000] {standard_task_runner.py:63} INFO - Started process 2709 to run task
[2025-06-18T11:26:17.328+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'usdpkr_forecasting_modular', 'train_lasso', 'manual__2025-06-18T11:25:54.529701+00:00', '--job-id', '606', '--raw', '--subdir', 'DAGS_FOLDER/usdpkr_forecasting_dag.py', '--cfg-path', '/tmp/tmpkwv5z1ya']
[2025-06-18T11:26:17.331+0000] {standard_task_runner.py:91} INFO - Job 606: Subtask train_lasso
[2025-06-18T11:26:17.374+0000] {task_command.py:426} INFO - Running <TaskInstance: usdpkr_forecasting_modular.train_lasso manual__2025-06-18T11:25:54.529701+00:00 [running]> on host 9c4806d77c92
[2025-06-18T11:26:17.483+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='usdpkr_forecasting_modular' AIRFLOW_CTX_TASK_ID='train_lasso' AIRFLOW_CTX_EXECUTION_DATE='2025-06-18T11:25:54.529701+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-06-18T11:25:54.529701+00:00'
[2025-06-18T11:26:17.485+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-06-18T11:26:17.509+0000] {logging_mixin.py:188} INFO - X_train shape: (196, 50)
[2025-06-18T11:26:17.510+0000] {logging_mixin.py:188} INFO - y_train shape: (196, 1)
[2025-06-18T11:26:17.553+0000] {logging_mixin.py:188} INFO - First few rows of X_train:          GOLD  FOREX_RESERVES  ...  GOLD_roll_mean3  GOLD_roll_std3
0  421.799988             0.0  ...              NaN             NaN
1  436.500000             0.0  ...              NaN             NaN
2  428.700012             0.0  ...              NaN             NaN
3  435.000000             0.0  ...       429.000000        7.354596
4  416.299988             0.0  ...       433.400004        4.138833

[5 rows x 50 columns]
[2025-06-18T11:26:17.557+0000] {logging_mixin.py:188} INFO - First few rows of y_train:       USDPKR
0  59.150002
1  59.150002
2  59.360001
3  59.430000
4  59.555000
[2025-06-18T11:26:17.560+0000] {model_steps.py:821} ERROR - Error in train_lasso_model: Input X contains NaN.
LassoCV does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
[2025-06-18T11:26:17.561+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-06-18T11:26:17.562+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 465, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 432, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 400, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 235, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 252, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/inflation_modules/model_steps.py", line 812, in train_lasso_model
    model.fit(X_train, y_train)
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py", line 2182, in fit
    return super().fit(X, y, sample_weight=sample_weight, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/base.py", line 1363, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py", line 1693, in fit
    X, y = validate_data(
           ^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 2966, in validate_data
    X = check_array(X, input_name="X", **check_X_params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1105, in check_array
    _assert_all_finite(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 120, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 169, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoCV does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
[2025-06-18T11:26:17.577+0000] {taskinstance.py:1206} INFO - Marking task as UP_FOR_RETRY. dag_id=usdpkr_forecasting_modular, task_id=train_lasso, run_id=manual__2025-06-18T11:25:54.529701+00:00, execution_date=20250618T112554, start_date=20250618T112617, end_date=20250618T112617
[2025-06-18T11:26:17.590+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 606 for task train_lasso (Input X contains NaN.
LassoCV does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values; 2709)
[2025-06-18T11:26:17.621+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2025-06-18T11:26:17.643+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-06-18T11:26:17.645+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
